// determines the location of the Android SDK, using a key from
// local.properties. If this file does not exist, an attempt is made to
// infer the location and stored in the local.properties file for future use
// (and easy modification, if the inferred value is wrong).
def androidSdkDir = {
    def localPropertiesFile = file(new File(projectDir, "local.properties"))

    if (!localPropertiesFile.exists()) {
        throw new GradleException("local.properties file missing")
    }

    def props = new Properties()
    localPropertiesFile.withInputStream { props.load(it) }
    def sdkDir = props.get("sdk.dir")
    if (sdkDir == null) {
        throw new GradleException("sdk.dir not defined in local.properties")
    }
    return sdkDir
}

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.1'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
    }
}

allprojects {
    repositories {
        jcenter()

        maven {
          url "${androidSdkDir()}/extras/android/m2repository"
        }
    }
}

apply plugin: 'com.android.application'

dependencies {
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:design:25.3.1'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'org.apmem.tools:layouts:1.10@aar'
    compile 'net.openid:appauth:0.7.0'
}

android {
    defaultConfig {
        manifestPlaceholders = [
                'appAuthRedirectScheme': 'com.googleusercontent.apps.533526602309-6g5u7a7gk5gaevtei81mt8c5aokbeklv'
        ]
    }
    signingConfigs {
        debugAndRelease {
            keyAlias 'appauth'
            keyPassword 'appauth'
            storeFile file('appauth.keystore')
            storePassword 'appauth'
        }
    }
    compileSdkVersion 25
    buildToolsVersion '25.0.2'
    sourceSets {
        main.manifest.srcFile 'AndroidManifest.xml'
        main.java.srcDirs = ['src']
        main.aidl.srcDirs = ['src']
        main.res.srcDir 'res'
        main.assets.srcDir 'assets'
        main.resources.srcDir 'src'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debugAndRelease
        }
        debug {
            signingConfig signingConfigs.debugAndRelease
        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    lintOptions {
        warningsAsErrors true
        disable 'PrivateResource'
    }
}
